2024-12-03 11:29:36,921:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-03 11:29:36,921:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-03 11:29:36,921:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-03 11:29:36,921:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-03 11:29:51,888:INFO:PyCaret RegressionExperiment
2024-12-03 11:29:51,889:INFO:Logging name: reg-default-name
2024-12-03 11:29:51,889:INFO:ML Usecase: MLUsecase.REGRESSION
2024-12-03 11:29:51,890:INFO:version 3.3.2
2024-12-03 11:29:51,890:INFO:Initializing setup()
2024-12-03 11:29:51,890:INFO:self.USI: 868d
2024-12-03 11:29:51,890:INFO:self._variable_keys: {'memory', 'y_train', 'data', 'pipeline', 'y_test', '_available_plots', 'html_param', 'target_param', 'USI', 'gpu_n_jobs_param', 'X_train', 'fold_shuffle_param', 'y', 'logging_param', 'X_test', 'seed', 'log_plots_param', 'idx', 'gpu_param', 'fold_generator', 'transform_target_param', '_ml_usecase', 'X', 'n_jobs_param', 'exp_name_log', 'fold_groups_param', 'exp_id'}
2024-12-03 11:29:51,890:INFO:Checking environment
2024-12-03 11:29:51,890:INFO:python_version: 3.11.5
2024-12-03 11:29:51,890:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-12-03 11:29:51,890:INFO:machine: AMD64
2024-12-03 11:29:51,890:INFO:platform: Windows-10-10.0.22631-SP0
2024-12-03 11:29:51,890:INFO:Memory: svmem(total=16803217408, available=4569432064, percent=72.8, used=12233785344, free=4569432064)
2024-12-03 11:29:51,891:INFO:Physical Core: 10
2024-12-03 11:29:51,891:INFO:Logical Core: 12
2024-12-03 11:29:51,891:INFO:Checking libraries
2024-12-03 11:29:51,891:INFO:System:
2024-12-03 11:29:51,891:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-12-03 11:29:51,891:INFO:executable: c:\Users\shaki\anaconda3\python.exe
2024-12-03 11:29:51,891:INFO:   machine: Windows-10-10.0.22631-SP0
2024-12-03 11:29:51,891:INFO:PyCaret required dependencies:
2024-12-03 11:29:52,811:INFO:                 pip: 23.2.1
2024-12-03 11:29:52,811:INFO:          setuptools: 68.0.0
2024-12-03 11:29:52,811:INFO:             pycaret: 3.3.2
2024-12-03 11:29:52,811:INFO:             IPython: 8.15.0
2024-12-03 11:29:52,811:INFO:          ipywidgets: 8.0.4
2024-12-03 11:29:52,811:INFO:                tqdm: 4.65.0
2024-12-03 11:29:52,811:INFO:               numpy: 1.24.3
2024-12-03 11:29:52,811:INFO:              pandas: 2.0.3
2024-12-03 11:29:52,811:INFO:              jinja2: 3.1.2
2024-12-03 11:29:52,811:INFO:               scipy: 1.11.1
2024-12-03 11:29:52,811:INFO:              joblib: 1.2.0
2024-12-03 11:29:52,811:INFO:             sklearn: 1.4.2
2024-12-03 11:29:52,811:INFO:                pyod: 2.0.2
2024-12-03 11:29:52,811:INFO:            imblearn: 0.12.3
2024-12-03 11:29:52,811:INFO:   category_encoders: 2.6.3
2024-12-03 11:29:52,811:INFO:            lightgbm: 4.5.0
2024-12-03 11:29:52,811:INFO:               numba: 0.57.1
2024-12-03 11:29:52,811:INFO:            requests: 2.31.0
2024-12-03 11:29:52,811:INFO:          matplotlib: 3.7.2
2024-12-03 11:29:52,811:INFO:          scikitplot: 0.3.7
2024-12-03 11:29:52,811:INFO:         yellowbrick: 1.5
2024-12-03 11:29:52,811:INFO:              plotly: 5.24.0
2024-12-03 11:29:52,811:INFO:    plotly-resampler: Not installed
2024-12-03 11:29:52,811:INFO:             kaleido: 0.2.1
2024-12-03 11:29:52,811:INFO:           schemdraw: 0.15
2024-12-03 11:29:52,811:INFO:         statsmodels: 0.14.0
2024-12-03 11:29:52,812:INFO:              sktime: 0.26.0
2024-12-03 11:29:52,812:INFO:               tbats: 1.1.3
2024-12-03 11:29:52,812:INFO:            pmdarima: 2.0.4
2024-12-03 11:29:52,812:INFO:              psutil: 5.9.0
2024-12-03 11:29:52,812:INFO:          markupsafe: 2.1.1
2024-12-03 11:29:52,812:INFO:             pickle5: Not installed
2024-12-03 11:29:52,812:INFO:         cloudpickle: 2.2.1
2024-12-03 11:29:52,812:INFO:         deprecation: 2.1.0
2024-12-03 11:29:52,812:INFO:              xxhash: 2.0.2
2024-12-03 11:29:52,812:INFO:           wurlitzer: Not installed
2024-12-03 11:29:52,812:INFO:PyCaret optional dependencies:
2024-12-03 11:29:52,865:INFO:                shap: 0.46.0
2024-12-03 11:29:52,865:INFO:           interpret: Not installed
2024-12-03 11:29:52,865:INFO:                umap: 0.5.6
2024-12-03 11:29:52,865:INFO:     ydata_profiling: Not installed
2024-12-03 11:29:52,865:INFO:  explainerdashboard: Not installed
2024-12-03 11:29:52,866:INFO:             autoviz: Not installed
2024-12-03 11:29:52,866:INFO:           fairlearn: Not installed
2024-12-03 11:29:52,866:INFO:          deepchecks: Not installed
2024-12-03 11:29:52,866:INFO:             xgboost: 2.1.1
2024-12-03 11:29:52,866:INFO:            catboost: Not installed
2024-12-03 11:29:52,866:INFO:              kmodes: Not installed
2024-12-03 11:29:52,866:INFO:             mlxtend: Not installed
2024-12-03 11:29:52,866:INFO:       statsforecast: Not installed
2024-12-03 11:29:52,866:INFO:        tune_sklearn: Not installed
2024-12-03 11:29:52,866:INFO:                 ray: Not installed
2024-12-03 11:29:52,866:INFO:            hyperopt: Not installed
2024-12-03 11:29:52,866:INFO:              optuna: Not installed
2024-12-03 11:29:52,866:INFO:               skopt: Not installed
2024-12-03 11:29:52,867:INFO:              mlflow: 2.16.2
2024-12-03 11:29:52,867:INFO:              gradio: Not installed
2024-12-03 11:29:52,867:INFO:             fastapi: Not installed
2024-12-03 11:29:52,867:INFO:             uvicorn: Not installed
2024-12-03 11:29:52,867:INFO:              m2cgen: Not installed
2024-12-03 11:29:52,867:INFO:           evidently: Not installed
2024-12-03 11:29:52,867:INFO:               fugue: Not installed
2024-12-03 11:29:52,867:INFO:           streamlit: Not installed
2024-12-03 11:29:52,867:INFO:             prophet: Not installed
2024-12-03 11:29:52,867:INFO:None
2024-12-03 11:29:52,867:INFO:Set up data.
2024-12-03 11:29:53,260:INFO:Set up folding strategy.
2024-12-03 11:29:53,260:INFO:Set up train/test split.
2024-12-03 11:29:53,544:INFO:Set up index.
2024-12-03 11:29:53,548:INFO:Assigning column types.
2024-12-03 11:29:53,953:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-12-03 11:29:53,953:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-03 11:29:53,956:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-03 11:29:53,958:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-03 11:29:54,260:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 11:29:54,284:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 11:29:54,285:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:29:54,287:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:29:54,287:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-03 11:29:54,289:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-03 11:29:54,291:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-03 11:29:54,661:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 11:29:54,686:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 11:29:54,686:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:29:54,688:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:29:54,688:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-12-03 11:29:54,690:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-03 11:29:54,693:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-03 11:29:54,990:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 11:29:55,014:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 11:29:55,014:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:29:55,015:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:29:55,019:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-03 11:29:55,021:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-03 11:29:55,399:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 11:29:55,424:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 11:29:55,425:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:29:55,426:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:29:55,426:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-12-03 11:29:55,431:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-03 11:29:55,712:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 11:29:55,737:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 11:29:55,737:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:29:55,739:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:29:55,743:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-03 11:29:56,115:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 11:29:56,141:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 11:29:56,141:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:29:56,142:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:29:56,143:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-12-03 11:29:56,441:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 11:29:56,464:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 11:29:56,464:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:29:56,466:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:29:56,760:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 11:29:56,783:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 11:29:56,784:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:29:56,785:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:29:56,785:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-12-03 11:29:57,203:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 11:29:57,227:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:29:57,229:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:29:57,523:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 11:29:57,548:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:29:57,550:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:29:57,550:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-12-03 11:29:57,888:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:29:57,889:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:29:58,226:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:29:58,227:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:29:58,230:INFO:Preparing preprocessing pipeline...
2024-12-03 11:29:58,230:INFO:Set up simple imputation.
2024-12-03 11:29:58,398:INFO:Set up encoding of ordinal features.
2024-12-03 11:29:58,606:INFO:Set up encoding of categorical features.
2024-12-03 11:29:58,636:INFO:Set up column name cleaning.
2024-12-03 11:30:02,490:INFO:Finished creating preprocessing pipeline.
2024-12-03 11:30:02,511:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\shaki\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['AAMDC', 'AASDHPPT', 'ABAT',
                                             'ABCB10', 'ABCC2', 'ABCC4',
                                             'ABCC9', 'ABCD3', 'ABCF1',
                                             'ABHD13', 'ABHD2', 'ABHD4', 'ABI1',
                                             'RABL2A', 'ABLIM1', 'ACACB',
                                             'ACAD10', 'ACAD8', 'ACADM',
                                             'ACAT1', 'ACBD3', 'ACBD6', 'ACCS',
                                             'ACER3', 'ACIN1', 'ACOT11',
                                             'A...
                 TransformerWrapper(include=['Sex'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['Sex'],
                                    transformer=OrdinalEncoder(cols=['Sex'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'Sex',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2024-12-03 11:30:02,512:INFO:Creating final display dataframe.
2024-12-03 11:30:04,257:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 0.50s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = self._memory_full_transform(

2024-12-03 11:30:08,911:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 0.90s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = self._memory_full_transform(

2024-12-03 11:30:10,852:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target         Mortality
2                   Target type        Regression
3           Original data shape       (767, 3203)
4        Transformed data shape       (767, 3203)
5   Transformed train set shape       (536, 3203)
6    Transformed test set shape       (231, 3203)
7              Numeric features              3201
8          Categorical features                 1
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator             KFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  reg-default-name
21                          USI              868d
2024-12-03 11:30:11,398:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:30:11,401:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:30:11,797:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 11:30:11,800:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 11:30:11,800:INFO:setup() successfully completed in 19.94s...............
2024-12-03 11:31:01,920:INFO:Initializing compare_models()
2024-12-03 11:31:01,921:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-12-03 11:31:01,921:INFO:Checking exceptions
2024-12-03 11:31:02,145:INFO:Preparing display monitor
2024-12-03 11:31:02,166:INFO:Initializing Linear Regression
2024-12-03 11:31:02,166:INFO:Total runtime is 0.0 minutes
2024-12-03 11:31:02,171:INFO:SubProcess create_model() called ==================================
2024-12-03 11:31:02,172:INFO:Initializing create_model()
2024-12-03 11:31:02,173:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:31:02,173:INFO:Checking exceptions
2024-12-03 11:31:02,173:INFO:Importing libraries
2024-12-03 11:31:02,173:INFO:Copying training dataset
2024-12-03 11:31:02,632:INFO:Defining folds
2024-12-03 11:31:02,632:INFO:Declaring metric variables
2024-12-03 11:31:02,635:INFO:Importing untrained model
2024-12-03 11:31:02,637:INFO:Linear Regression Imported successfully
2024-12-03 11:31:02,643:INFO:Starting cross validation
2024-12-03 11:31:02,656:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:31:14,844:WARNING:create_model() for lr raised an exception or returned all 0.0, trying without fit_kwargs:
2024-12-03 11:31:14,852:WARNING:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_base.py", line 578, in fit
    X, y = self._validate_data(
           ^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:31:14,852:INFO:Initializing create_model()
2024-12-03 11:31:14,852:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:31:14,852:INFO:Checking exceptions
2024-12-03 11:31:14,852:INFO:Importing libraries
2024-12-03 11:31:14,853:INFO:Copying training dataset
2024-12-03 11:31:15,199:INFO:Defining folds
2024-12-03 11:31:15,199:INFO:Declaring metric variables
2024-12-03 11:31:15,202:INFO:Importing untrained model
2024-12-03 11:31:15,206:INFO:Linear Regression Imported successfully
2024-12-03 11:31:15,211:INFO:Starting cross validation
2024-12-03 11:31:15,219:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:31:23,081:ERROR:create_model() for lr raised an exception or returned all 0.0:
2024-12-03 11:31:23,084:ERROR:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_base.py", line 578, in fit
    X, y = self._validate_data(
           ^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_base.py", line 578, in fit
    X, y = self._validate_data(
           ^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:31:23,089:INFO:Initializing Lasso Regression
2024-12-03 11:31:23,089:INFO:Total runtime is 0.34871931076049806 minutes
2024-12-03 11:31:23,092:INFO:SubProcess create_model() called ==================================
2024-12-03 11:31:23,093:INFO:Initializing create_model()
2024-12-03 11:31:23,093:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:31:23,093:INFO:Checking exceptions
2024-12-03 11:31:23,093:INFO:Importing libraries
2024-12-03 11:31:23,093:INFO:Copying training dataset
2024-12-03 11:31:23,435:INFO:Defining folds
2024-12-03 11:31:23,435:INFO:Declaring metric variables
2024-12-03 11:31:23,439:INFO:Importing untrained model
2024-12-03 11:31:23,441:INFO:Lasso Regression Imported successfully
2024-12-03 11:31:23,445:INFO:Starting cross validation
2024-12-03 11:31:23,453:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:31:30,262:WARNING:create_model() for lasso raised an exception or returned all 0.0, trying without fit_kwargs:
2024-12-03 11:31:30,263:WARNING:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 955, in fit
    X, y = self._validate_data(
           ^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:31:30,264:INFO:Initializing create_model()
2024-12-03 11:31:30,264:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:31:30,264:INFO:Checking exceptions
2024-12-03 11:31:30,264:INFO:Importing libraries
2024-12-03 11:31:30,264:INFO:Copying training dataset
2024-12-03 11:31:30,590:INFO:Defining folds
2024-12-03 11:31:30,590:INFO:Declaring metric variables
2024-12-03 11:31:30,593:INFO:Importing untrained model
2024-12-03 11:31:30,595:INFO:Lasso Regression Imported successfully
2024-12-03 11:31:30,603:INFO:Starting cross validation
2024-12-03 11:31:30,609:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:31:37,407:ERROR:create_model() for lasso raised an exception or returned all 0.0:
2024-12-03 11:31:37,409:ERROR:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 955, in fit
    X, y = self._validate_data(
           ^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 955, in fit
    X, y = self._validate_data(
           ^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:31:37,415:INFO:Initializing Ridge Regression
2024-12-03 11:31:37,415:INFO:Total runtime is 0.5874828378359477 minutes
2024-12-03 11:31:37,417:INFO:SubProcess create_model() called ==================================
2024-12-03 11:31:37,419:INFO:Initializing create_model()
2024-12-03 11:31:37,419:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:31:37,419:INFO:Checking exceptions
2024-12-03 11:31:37,419:INFO:Importing libraries
2024-12-03 11:31:37,419:INFO:Copying training dataset
2024-12-03 11:31:37,751:INFO:Defining folds
2024-12-03 11:31:37,751:INFO:Declaring metric variables
2024-12-03 11:31:37,757:INFO:Importing untrained model
2024-12-03 11:31:37,760:INFO:Ridge Regression Imported successfully
2024-12-03 11:31:37,763:INFO:Starting cross validation
2024-12-03 11:31:37,772:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:31:44,572:WARNING:create_model() for ridge raised an exception or returned all 0.0, trying without fit_kwargs:
2024-12-03 11:31:44,573:WARNING:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py", line 1167, in fit
    X, y = self._validate_data(
           ^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:31:44,574:INFO:Initializing create_model()
2024-12-03 11:31:44,574:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:31:44,574:INFO:Checking exceptions
2024-12-03 11:31:44,574:INFO:Importing libraries
2024-12-03 11:31:44,574:INFO:Copying training dataset
2024-12-03 11:31:44,905:INFO:Defining folds
2024-12-03 11:31:44,906:INFO:Declaring metric variables
2024-12-03 11:31:44,909:INFO:Importing untrained model
2024-12-03 11:31:44,912:INFO:Ridge Regression Imported successfully
2024-12-03 11:31:44,918:INFO:Starting cross validation
2024-12-03 11:31:44,924:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:31:51,514:ERROR:create_model() for ridge raised an exception or returned all 0.0:
2024-12-03 11:31:51,516:ERROR:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py", line 1167, in fit
    X, y = self._validate_data(
           ^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_ridge.py", line 1167, in fit
    X, y = self._validate_data(
           ^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:31:51,520:INFO:Initializing Elastic Net
2024-12-03 11:31:51,520:INFO:Total runtime is 0.8225779851277669 minutes
2024-12-03 11:31:51,523:INFO:SubProcess create_model() called ==================================
2024-12-03 11:31:51,523:INFO:Initializing create_model()
2024-12-03 11:31:51,523:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:31:51,523:INFO:Checking exceptions
2024-12-03 11:31:51,523:INFO:Importing libraries
2024-12-03 11:31:51,524:INFO:Copying training dataset
2024-12-03 11:31:51,941:INFO:Defining folds
2024-12-03 11:31:51,941:INFO:Declaring metric variables
2024-12-03 11:31:51,945:INFO:Importing untrained model
2024-12-03 11:31:51,947:INFO:Elastic Net Imported successfully
2024-12-03 11:31:51,954:INFO:Starting cross validation
2024-12-03 11:31:51,961:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:31:58,663:WARNING:create_model() for en raised an exception or returned all 0.0, trying without fit_kwargs:
2024-12-03 11:31:58,664:WARNING:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 955, in fit
    X, y = self._validate_data(
           ^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:31:58,664:INFO:Initializing create_model()
2024-12-03 11:31:58,664:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:31:58,665:INFO:Checking exceptions
2024-12-03 11:31:58,665:INFO:Importing libraries
2024-12-03 11:31:58,665:INFO:Copying training dataset
2024-12-03 11:31:59,090:INFO:Defining folds
2024-12-03 11:31:59,091:INFO:Declaring metric variables
2024-12-03 11:31:59,093:INFO:Importing untrained model
2024-12-03 11:31:59,097:INFO:Elastic Net Imported successfully
2024-12-03 11:31:59,104:INFO:Starting cross validation
2024-12-03 11:31:59,112:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:32:05,720:ERROR:create_model() for en raised an exception or returned all 0.0:
2024-12-03 11:32:05,722:ERROR:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 955, in fit
    X, y = self._validate_data(
           ^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_coordinate_descent.py", line 955, in fit
    X, y = self._validate_data(
           ^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:32:05,725:INFO:Initializing Least Angle Regression
2024-12-03 11:32:05,725:INFO:Total runtime is 1.059330677986145 minutes
2024-12-03 11:32:05,728:INFO:SubProcess create_model() called ==================================
2024-12-03 11:32:05,728:INFO:Initializing create_model()
2024-12-03 11:32:05,728:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:32:05,728:INFO:Checking exceptions
2024-12-03 11:32:05,728:INFO:Importing libraries
2024-12-03 11:32:05,728:INFO:Copying training dataset
2024-12-03 11:32:06,152:INFO:Defining folds
2024-12-03 11:32:06,152:INFO:Declaring metric variables
2024-12-03 11:32:06,156:INFO:Importing untrained model
2024-12-03 11:32:06,159:INFO:Least Angle Regression Imported successfully
2024-12-03 11:32:06,163:INFO:Starting cross validation
2024-12-03 11:32:06,171:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:32:12,798:WARNING:create_model() for lar raised an exception or returned all 0.0, trying without fit_kwargs:
2024-12-03 11:32:12,799:WARNING:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_least_angle.py", line 1146, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:32:12,799:INFO:Initializing create_model()
2024-12-03 11:32:12,799:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:32:12,799:INFO:Checking exceptions
2024-12-03 11:32:12,800:INFO:Importing libraries
2024-12-03 11:32:12,800:INFO:Copying training dataset
2024-12-03 11:32:13,221:INFO:Defining folds
2024-12-03 11:32:13,221:INFO:Declaring metric variables
2024-12-03 11:32:13,225:INFO:Importing untrained model
2024-12-03 11:32:13,228:INFO:Least Angle Regression Imported successfully
2024-12-03 11:32:13,233:INFO:Starting cross validation
2024-12-03 11:32:13,242:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:32:19,809:ERROR:create_model() for lar raised an exception or returned all 0.0:
2024-12-03 11:32:19,812:ERROR:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_least_angle.py", line 1146, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_least_angle.py", line 1146, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:32:19,817:INFO:Initializing Lasso Least Angle Regression
2024-12-03 11:32:19,817:INFO:Total runtime is 1.2941862066586813 minutes
2024-12-03 11:32:19,820:INFO:SubProcess create_model() called ==================================
2024-12-03 11:32:19,820:INFO:Initializing create_model()
2024-12-03 11:32:19,820:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:32:19,820:INFO:Checking exceptions
2024-12-03 11:32:19,820:INFO:Importing libraries
2024-12-03 11:32:19,820:INFO:Copying training dataset
2024-12-03 11:32:20,248:INFO:Defining folds
2024-12-03 11:32:20,248:INFO:Declaring metric variables
2024-12-03 11:32:20,253:INFO:Importing untrained model
2024-12-03 11:32:20,257:INFO:Lasso Least Angle Regression Imported successfully
2024-12-03 11:32:20,262:INFO:Starting cross validation
2024-12-03 11:32:20,270:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:32:27,695:WARNING:create_model() for llar raised an exception or returned all 0.0, trying without fit_kwargs:
2024-12-03 11:32:27,696:WARNING:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_least_angle.py", line 1146, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:32:27,697:INFO:Initializing create_model()
2024-12-03 11:32:27,697:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:32:27,697:INFO:Checking exceptions
2024-12-03 11:32:27,697:INFO:Importing libraries
2024-12-03 11:32:27,697:INFO:Copying training dataset
2024-12-03 11:32:28,160:INFO:Defining folds
2024-12-03 11:32:28,161:INFO:Declaring metric variables
2024-12-03 11:32:28,163:INFO:Importing untrained model
2024-12-03 11:32:28,170:INFO:Lasso Least Angle Regression Imported successfully
2024-12-03 11:32:28,174:INFO:Starting cross validation
2024-12-03 11:32:28,182:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:32:35,689:ERROR:create_model() for llar raised an exception or returned all 0.0:
2024-12-03 11:32:35,691:ERROR:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_least_angle.py", line 1146, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_least_angle.py", line 1146, in fit
    X, y = self._validate_data(X, y, y_numeric=True, multi_output=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:32:35,695:INFO:Initializing Orthogonal Matching Pursuit
2024-12-03 11:32:35,695:INFO:Total runtime is 1.5588223735491435 minutes
2024-12-03 11:32:35,697:INFO:SubProcess create_model() called ==================================
2024-12-03 11:32:35,697:INFO:Initializing create_model()
2024-12-03 11:32:35,697:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:32:35,697:INFO:Checking exceptions
2024-12-03 11:32:35,698:INFO:Importing libraries
2024-12-03 11:32:35,698:INFO:Copying training dataset
2024-12-03 11:32:36,045:INFO:Defining folds
2024-12-03 11:32:36,045:INFO:Declaring metric variables
2024-12-03 11:32:36,050:INFO:Importing untrained model
2024-12-03 11:32:36,055:INFO:Orthogonal Matching Pursuit Imported successfully
2024-12-03 11:32:36,059:INFO:Starting cross validation
2024-12-03 11:32:36,067:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:32:43,991:WARNING:create_model() for omp raised an exception or returned all 0.0, trying without fit_kwargs:
2024-12-03 11:32:43,993:WARNING:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_omp.py", line 750, in fit
    X, y = self._validate_data(X, y, multi_output=True, y_numeric=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:32:43,993:INFO:Initializing create_model()
2024-12-03 11:32:43,994:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:32:43,994:INFO:Checking exceptions
2024-12-03 11:32:43,994:INFO:Importing libraries
2024-12-03 11:32:43,994:INFO:Copying training dataset
2024-12-03 11:32:44,337:INFO:Defining folds
2024-12-03 11:32:44,338:INFO:Declaring metric variables
2024-12-03 11:32:44,342:INFO:Importing untrained model
2024-12-03 11:32:44,345:INFO:Orthogonal Matching Pursuit Imported successfully
2024-12-03 11:32:44,349:INFO:Starting cross validation
2024-12-03 11:32:44,358:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:32:52,104:ERROR:create_model() for omp raised an exception or returned all 0.0:
2024-12-03 11:32:52,107:ERROR:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_omp.py", line 750, in fit
    X, y = self._validate_data(X, y, multi_output=True, y_numeric=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_omp.py", line 750, in fit
    X, y = self._validate_data(X, y, multi_output=True, y_numeric=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:32:52,111:INFO:Initializing Bayesian Ridge
2024-12-03 11:32:52,111:INFO:Total runtime is 1.8324279904365541 minutes
2024-12-03 11:32:52,114:INFO:SubProcess create_model() called ==================================
2024-12-03 11:32:52,115:INFO:Initializing create_model()
2024-12-03 11:32:52,115:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:32:52,115:INFO:Checking exceptions
2024-12-03 11:32:52,115:INFO:Importing libraries
2024-12-03 11:32:52,115:INFO:Copying training dataset
2024-12-03 11:32:52,532:INFO:Defining folds
2024-12-03 11:32:52,532:INFO:Declaring metric variables
2024-12-03 11:32:52,535:INFO:Importing untrained model
2024-12-03 11:32:52,538:INFO:Bayesian Ridge Imported successfully
2024-12-03 11:32:52,543:INFO:Starting cross validation
2024-12-03 11:32:52,552:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:33:01,051:WARNING:create_model() for br raised an exception or returned all 0.0, trying without fit_kwargs:
2024-12-03 11:33:01,053:WARNING:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_bayes.py", line 296, in fit
    X, y = self._validate_data(X, y, dtype=[np.float64, np.float32], y_numeric=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:33:01,054:INFO:Initializing create_model()
2024-12-03 11:33:01,054:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:33:01,054:INFO:Checking exceptions
2024-12-03 11:33:01,054:INFO:Importing libraries
2024-12-03 11:33:01,054:INFO:Copying training dataset
2024-12-03 11:33:01,504:INFO:Defining folds
2024-12-03 11:33:01,504:INFO:Declaring metric variables
2024-12-03 11:33:01,506:INFO:Importing untrained model
2024-12-03 11:33:01,510:INFO:Bayesian Ridge Imported successfully
2024-12-03 11:33:01,515:INFO:Starting cross validation
2024-12-03 11:33:01,522:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:33:08,960:ERROR:create_model() for br raised an exception or returned all 0.0:
2024-12-03 11:33:08,963:ERROR:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_bayes.py", line 296, in fit
    X, y = self._validate_data(X, y, dtype=[np.float64, np.float32], y_numeric=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 815, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_bayes.py", line 296, in fit
    X, y = self._validate_data(X, y, dtype=[np.float64, np.float32], y_numeric=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 650, in _validate_data
    X, y = check_X_y(X, y, **check_params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1279, in check_X_y
    y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\validation.py", line 1304, in _check_y
    y = y.astype(np.float64)
        ^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:33:08,969:INFO:Initializing Passive Aggressive Regressor
2024-12-03 11:33:08,969:INFO:Total runtime is 2.1133915305137636 minutes
2024-12-03 11:33:08,972:INFO:SubProcess create_model() called ==================================
2024-12-03 11:33:08,972:INFO:Initializing create_model()
2024-12-03 11:33:08,972:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:33:08,972:INFO:Checking exceptions
2024-12-03 11:33:08,972:INFO:Importing libraries
2024-12-03 11:33:08,972:INFO:Copying training dataset
2024-12-03 11:33:09,419:INFO:Defining folds
2024-12-03 11:33:09,419:INFO:Declaring metric variables
2024-12-03 11:33:09,424:INFO:Importing untrained model
2024-12-03 11:33:09,426:INFO:Passive Aggressive Regressor Imported successfully
2024-12-03 11:33:09,430:INFO:Starting cross validation
2024-12-03 11:33:09,439:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 11:33:17,152:WARNING:create_model() for par raised an exception or returned all 0.0, trying without fit_kwargs:
2024-12-03 11:33:17,153:WARNING:Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 794, in compare_models
    model, model_fit_time = self._create_model(**create_model_args)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1533, in _create_model
    model, model_fit_time, model_results, _ = self._create_model_with_cv(
                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 1126, in _create_model_with_cv
    scores = cross_validate(
             ^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 450, in cross_validate
    _warn_or_raise_about_fit_failures(results, error_score)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 536, in _warn_or_raise_about_fit_failures
    raise ValueError(all_fits_failed_message)
ValueError: 
All the 10 fits failed.
It is very likely that your model is misconfigured.
You can try to debug the error by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
                       ^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\joblib\memory.py", line 349, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\base.py", line 1474, in wrapper
    return fit_method(estimator, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_passive_aggressive.py", line 566, in fit
    return self._fit(
           ^^^^^^^^^^
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1557, in _fit
    self._partial_fit(
  File "c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1466, in _partial_fit
    y = y.astype(X.dtype, copy=False)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ValueError: could not convert string to float: 'Dead'


2024-12-03 11:33:17,153:INFO:Initializing create_model()
2024-12-03 11:33:17,153:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001AA715F5E10>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001AA73075DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 11:33:17,153:INFO:Checking exceptions
2024-12-03 11:33:17,154:INFO:Importing libraries
2024-12-03 11:33:17,154:INFO:Copying training dataset
2024-12-03 11:33:17,592:INFO:Defining folds
2024-12-03 11:33:17,592:INFO:Declaring metric variables
2024-12-03 11:33:17,596:INFO:Importing untrained model
2024-12-03 11:33:17,599:INFO:Passive Aggressive Regressor Imported successfully
2024-12-03 11:33:17,607:INFO:Starting cross validation
2024-12-03 11:33:17,615:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:00:09,562:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-03 18:00:09,562:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-03 18:00:09,562:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-03 18:00:09,562:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-12-03 18:00:45,127:INFO:PyCaret RegressionExperiment
2024-12-03 18:00:45,127:INFO:Logging name: reg-default-name
2024-12-03 18:00:45,127:INFO:ML Usecase: MLUsecase.REGRESSION
2024-12-03 18:00:45,127:INFO:version 3.3.2
2024-12-03 18:00:45,127:INFO:Initializing setup()
2024-12-03 18:00:45,128:INFO:self.USI: ade0
2024-12-03 18:00:45,128:INFO:self._variable_keys: {'X_train', 'logging_param', 'transform_target_param', 'seed', 'gpu_n_jobs_param', 'log_plots_param', 'memory', '_ml_usecase', 'y_test', 'X_test', 'data', 'fold_shuffle_param', 'idx', 'gpu_param', 'exp_name_log', 'X', 'html_param', 'n_jobs_param', 'exp_id', 'y_train', 'fold_generator', 'y', 'target_param', '_available_plots', 'pipeline', 'USI', 'fold_groups_param'}
2024-12-03 18:00:45,128:INFO:Checking environment
2024-12-03 18:00:45,128:INFO:python_version: 3.11.5
2024-12-03 18:00:45,128:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-12-03 18:00:45,128:INFO:machine: AMD64
2024-12-03 18:00:45,128:INFO:platform: Windows-10-10.0.22631-SP0
2024-12-03 18:00:45,128:INFO:Memory: svmem(total=16803217408, available=6899286016, percent=58.9, used=9903931392, free=6899286016)
2024-12-03 18:00:45,129:INFO:Physical Core: 10
2024-12-03 18:00:45,129:INFO:Logical Core: 12
2024-12-03 18:00:45,129:INFO:Checking libraries
2024-12-03 18:00:45,129:INFO:System:
2024-12-03 18:00:45,129:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-12-03 18:00:45,129:INFO:executable: c:\Users\shaki\anaconda3\python.exe
2024-12-03 18:00:45,129:INFO:   machine: Windows-10-10.0.22631-SP0
2024-12-03 18:00:45,129:INFO:PyCaret required dependencies:
2024-12-03 18:00:45,929:INFO:                 pip: 23.2.1
2024-12-03 18:00:45,929:INFO:          setuptools: 68.0.0
2024-12-03 18:00:45,929:INFO:             pycaret: 3.3.2
2024-12-03 18:00:45,929:INFO:             IPython: 8.15.0
2024-12-03 18:00:45,929:INFO:          ipywidgets: 8.0.4
2024-12-03 18:00:45,929:INFO:                tqdm: 4.65.0
2024-12-03 18:00:45,929:INFO:               numpy: 1.24.3
2024-12-03 18:00:45,929:INFO:              pandas: 2.0.3
2024-12-03 18:00:45,929:INFO:              jinja2: 3.1.2
2024-12-03 18:00:45,929:INFO:               scipy: 1.11.1
2024-12-03 18:00:45,929:INFO:              joblib: 1.2.0
2024-12-03 18:00:45,929:INFO:             sklearn: 1.4.2
2024-12-03 18:00:45,929:INFO:                pyod: 2.0.2
2024-12-03 18:00:45,929:INFO:            imblearn: 0.12.3
2024-12-03 18:00:45,929:INFO:   category_encoders: 2.6.3
2024-12-03 18:00:45,929:INFO:            lightgbm: 4.5.0
2024-12-03 18:00:45,929:INFO:               numba: 0.57.1
2024-12-03 18:00:45,929:INFO:            requests: 2.31.0
2024-12-03 18:00:45,929:INFO:          matplotlib: 3.7.2
2024-12-03 18:00:45,929:INFO:          scikitplot: 0.3.7
2024-12-03 18:00:45,929:INFO:         yellowbrick: 1.5
2024-12-03 18:00:45,929:INFO:              plotly: 5.24.0
2024-12-03 18:00:45,929:INFO:    plotly-resampler: Not installed
2024-12-03 18:00:45,929:INFO:             kaleido: 0.2.1
2024-12-03 18:00:45,929:INFO:           schemdraw: 0.15
2024-12-03 18:00:45,929:INFO:         statsmodels: 0.14.0
2024-12-03 18:00:45,929:INFO:              sktime: 0.26.0
2024-12-03 18:00:45,929:INFO:               tbats: 1.1.3
2024-12-03 18:00:45,929:INFO:            pmdarima: 2.0.4
2024-12-03 18:00:45,929:INFO:              psutil: 5.9.0
2024-12-03 18:00:45,929:INFO:          markupsafe: 2.1.1
2024-12-03 18:00:45,929:INFO:             pickle5: Not installed
2024-12-03 18:00:45,929:INFO:         cloudpickle: 2.2.1
2024-12-03 18:00:45,929:INFO:         deprecation: 2.1.0
2024-12-03 18:00:45,929:INFO:              xxhash: 2.0.2
2024-12-03 18:00:45,929:INFO:           wurlitzer: Not installed
2024-12-03 18:00:45,929:INFO:PyCaret optional dependencies:
2024-12-03 18:00:45,981:INFO:                shap: 0.46.0
2024-12-03 18:00:45,981:INFO:           interpret: Not installed
2024-12-03 18:00:45,981:INFO:                umap: 0.5.6
2024-12-03 18:00:45,981:INFO:     ydata_profiling: Not installed
2024-12-03 18:00:45,981:INFO:  explainerdashboard: Not installed
2024-12-03 18:00:45,981:INFO:             autoviz: Not installed
2024-12-03 18:00:45,981:INFO:           fairlearn: Not installed
2024-12-03 18:00:45,981:INFO:          deepchecks: Not installed
2024-12-03 18:00:45,981:INFO:             xgboost: 2.1.1
2024-12-03 18:00:45,981:INFO:            catboost: Not installed
2024-12-03 18:00:45,981:INFO:              kmodes: Not installed
2024-12-03 18:00:45,981:INFO:             mlxtend: Not installed
2024-12-03 18:00:45,981:INFO:       statsforecast: Not installed
2024-12-03 18:00:45,981:INFO:        tune_sklearn: Not installed
2024-12-03 18:00:45,981:INFO:                 ray: Not installed
2024-12-03 18:00:45,981:INFO:            hyperopt: Not installed
2024-12-03 18:00:45,981:INFO:              optuna: Not installed
2024-12-03 18:00:45,981:INFO:               skopt: Not installed
2024-12-03 18:00:45,981:INFO:              mlflow: 2.16.2
2024-12-03 18:00:45,981:INFO:              gradio: Not installed
2024-12-03 18:00:45,981:INFO:             fastapi: Not installed
2024-12-03 18:00:45,981:INFO:             uvicorn: Not installed
2024-12-03 18:00:45,981:INFO:              m2cgen: Not installed
2024-12-03 18:00:45,981:INFO:           evidently: Not installed
2024-12-03 18:00:45,981:INFO:               fugue: Not installed
2024-12-03 18:00:45,981:INFO:           streamlit: Not installed
2024-12-03 18:00:45,981:INFO:             prophet: Not installed
2024-12-03 18:00:45,981:INFO:None
2024-12-03 18:00:45,981:INFO:Set up data.
2024-12-03 18:00:46,397:INFO:Set up folding strategy.
2024-12-03 18:00:46,397:INFO:Set up train/test split.
2024-12-03 18:00:46,762:INFO:Set up index.
2024-12-03 18:00:46,762:INFO:Assigning column types.
2024-12-03 18:00:47,165:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-12-03 18:00:47,165:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-03 18:00:47,165:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-03 18:00:47,165:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-03 18:00:47,447:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 18:00:47,464:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 18:00:47,464:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:00:47,480:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:00:47,481:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2024-12-03 18:00:47,482:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-03 18:00:47,482:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-03 18:00:47,763:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 18:00:47,779:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 18:00:47,779:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:00:47,779:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:00:47,779:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2024-12-03 18:00:47,795:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-03 18:00:47,798:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-03 18:00:48,164:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 18:00:48,180:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 18:00:48,180:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:00:48,180:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:00:48,196:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2024-12-03 18:00:48,196:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-03 18:00:48,465:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 18:00:48,496:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 18:00:48,496:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:00:48,496:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:00:48,496:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2024-12-03 18:00:48,496:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-03 18:00:48,798:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 18:00:48,813:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 18:00:48,813:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:00:48,813:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:00:48,813:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2024-12-03 18:00:49,184:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 18:00:49,213:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 18:00:49,213:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:00:49,213:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:00:49,213:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2024-12-03 18:00:49,513:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 18:00:49,530:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 18:00:49,530:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:00:49,530:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:00:49,815:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 18:00:49,847:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 18:00:49,847:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:00:49,847:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:00:49,847:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-12-03 18:00:50,214:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 18:00:50,232:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:00:50,232:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:00:50,529:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2024-12-03 18:00:50,546:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:00:50,546:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:00:50,546:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2024-12-03 18:00:50,864:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:00:50,869:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:00:51,170:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:00:51,178:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:00:51,179:INFO:Preparing preprocessing pipeline...
2024-12-03 18:00:51,179:INFO:Set up simple imputation.
2024-12-03 18:00:51,344:INFO:Set up encoding of ordinal features.
2024-12-03 18:00:51,481:INFO:Set up encoding of categorical features.
2024-12-03 18:00:51,516:INFO:Set up column name cleaning.
2024-12-03 18:00:54,648:INFO:Finished creating preprocessing pipeline.
2024-12-03 18:00:54,682:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\shaki\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['AAMDC', 'AASDHPPT', 'ABAT',
                                             'ABCB10', 'ABCC2', 'ABCC4',
                                             'ABCC9', 'ABCD3', 'ABCF1',
                                             'ABHD13', 'ABHD2', 'ABHD4', 'ABI1',
                                             'RABL2A', 'ABLIM1', 'ACACB',
                                             'ACAD10', 'ACAD8', 'ACADM',
                                             'ACAT1', 'ACBD3', 'ACBD6', 'ACCS',
                                             'ACER3', 'ACIN1', 'ACOT11',
                                             'A...
                 TransformerWrapper(include=['Sex'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['Sex'],
                                    transformer=OrdinalEncoder(cols=['Sex'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'Sex',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64}]))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames()))])
2024-12-03 18:00:54,682:INFO:Creating final display dataframe.
2024-12-03 18:00:56,246:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 0.53s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = self._memory_full_transform(

2024-12-03 18:01:00,955:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target         Mortality
2                   Target type        Regression
3           Original data shape       (768, 3203)
4        Transformed data shape       (768, 3203)
5   Transformed train set shape       (537, 3203)
6    Transformed test set shape       (231, 3203)
7              Numeric features              3201
8          Categorical features                 1
9      Rows with missing values              0.1%
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator             KFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  reg-default-name
22                          USI              ade0
2024-12-03 18:01:01,290:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:01:01,296:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:01:01,696:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:01:01,696:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:01:01,696:INFO:setup() successfully completed in 16.6s...............
2024-12-03 18:01:04,869:INFO:Initializing compare_models()
2024-12-03 18:01:04,872:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F098EE8350>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001F098EE8350>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-12-03 18:01:04,873:INFO:Checking exceptions
2024-12-03 18:01:04,967:INFO:Preparing display monitor
2024-12-03 18:01:04,999:INFO:Initializing Linear Regression
2024-12-03 18:01:04,999:INFO:Total runtime is 0.0 minutes
2024-12-03 18:01:05,005:INFO:SubProcess create_model() called ==================================
2024-12-03 18:01:05,006:INFO:Initializing create_model()
2024-12-03 18:01:05,006:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F098EE8350>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F0A2E81910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:01:05,006:INFO:Checking exceptions
2024-12-03 18:01:05,006:INFO:Importing libraries
2024-12-03 18:01:05,006:INFO:Copying training dataset
2024-12-03 18:01:05,429:INFO:Defining folds
2024-12-03 18:01:05,429:INFO:Declaring metric variables
2024-12-03 18:01:05,429:INFO:Importing untrained model
2024-12-03 18:01:05,429:INFO:Linear Regression Imported successfully
2024-12-03 18:01:05,429:INFO:Starting cross validation
2024-12-03 18:01:05,446:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:03:01,616:INFO:Initializing compare_models()
2024-12-03 18:03:01,617:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F098EE8350>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001F098EE8350>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-12-03 18:03:01,618:INFO:Checking exceptions
2024-12-03 18:03:01,715:INFO:Preparing display monitor
2024-12-03 18:03:01,735:INFO:Initializing Linear Regression
2024-12-03 18:03:01,735:INFO:Total runtime is 0.0 minutes
2024-12-03 18:03:01,738:INFO:SubProcess create_model() called ==================================
2024-12-03 18:03:01,739:INFO:Initializing create_model()
2024-12-03 18:03:01,739:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F098EE8350>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F0A2A9EA90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:03:01,739:INFO:Checking exceptions
2024-12-03 18:03:01,739:INFO:Importing libraries
2024-12-03 18:03:01,739:INFO:Copying training dataset
2024-12-03 18:03:02,091:INFO:Defining folds
2024-12-03 18:03:02,091:INFO:Declaring metric variables
2024-12-03 18:03:02,093:INFO:Importing untrained model
2024-12-03 18:03:02,096:INFO:Linear Regression Imported successfully
2024-12-03 18:03:02,098:INFO:Starting cross validation
2024-12-03 18:03:02,098:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:03:40,419:INFO:Initializing compare_models()
2024-12-03 18:03:40,419:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F098EE8350>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001F098EE8350>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2024-12-03 18:03:40,419:INFO:Checking exceptions
2024-12-03 18:03:40,651:INFO:Preparing display monitor
2024-12-03 18:03:40,668:INFO:Initializing Linear Regression
2024-12-03 18:03:40,668:INFO:Total runtime is 0.0 minutes
2024-12-03 18:03:40,673:INFO:SubProcess create_model() called ==================================
2024-12-03 18:03:40,673:INFO:Initializing create_model()
2024-12-03 18:03:40,674:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F098EE8350>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09EE96C50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:03:40,674:INFO:Checking exceptions
2024-12-03 18:03:40,674:INFO:Importing libraries
2024-12-03 18:03:40,674:INFO:Copying training dataset
2024-12-03 18:03:41,030:INFO:Defining folds
2024-12-03 18:03:41,030:INFO:Declaring metric variables
2024-12-03 18:03:41,030:INFO:Importing untrained model
2024-12-03 18:03:41,030:INFO:Linear Regression Imported successfully
2024-12-03 18:03:41,030:INFO:Starting cross validation
2024-12-03 18:03:41,046:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:06:54,685:INFO:PyCaret ClassificationExperiment
2024-12-03 18:06:54,685:INFO:Logging name: clf-default-name
2024-12-03 18:06:54,685:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-12-03 18:06:54,685:INFO:version 3.3.2
2024-12-03 18:06:54,685:INFO:Initializing setup()
2024-12-03 18:06:54,685:INFO:self.USI: 43fa
2024-12-03 18:06:54,685:INFO:self._variable_keys: {'X_train', 'logging_param', 'seed', 'gpu_n_jobs_param', 'log_plots_param', 'memory', 'fix_imbalance', '_ml_usecase', 'y_test', 'X_test', 'data', 'fold_shuffle_param', 'idx', 'gpu_param', 'exp_name_log', 'X', 'html_param', 'n_jobs_param', 'exp_id', 'y_train', 'is_multiclass', 'fold_generator', 'y', 'target_param', '_available_plots', 'pipeline', 'USI', 'fold_groups_param'}
2024-12-03 18:06:54,685:INFO:Checking environment
2024-12-03 18:06:54,685:INFO:python_version: 3.11.5
2024-12-03 18:06:54,685:INFO:python_build: ('main', 'Sep 11 2023 13:26:23')
2024-12-03 18:06:54,685:INFO:machine: AMD64
2024-12-03 18:06:54,685:INFO:platform: Windows-10-10.0.22631-SP0
2024-12-03 18:06:54,685:INFO:Memory: svmem(total=16803217408, available=7167303680, percent=57.3, used=9635913728, free=7167303680)
2024-12-03 18:06:54,685:INFO:Physical Core: 10
2024-12-03 18:06:54,685:INFO:Logical Core: 12
2024-12-03 18:06:54,685:INFO:Checking libraries
2024-12-03 18:06:54,685:INFO:System:
2024-12-03 18:06:54,685:INFO:    python: 3.11.5 | packaged by Anaconda, Inc. | (main, Sep 11 2023, 13:26:23) [MSC v.1916 64 bit (AMD64)]
2024-12-03 18:06:54,685:INFO:executable: c:\Users\shaki\anaconda3\python.exe
2024-12-03 18:06:54,685:INFO:   machine: Windows-10-10.0.22631-SP0
2024-12-03 18:06:54,685:INFO:PyCaret required dependencies:
2024-12-03 18:06:54,685:INFO:                 pip: 23.2.1
2024-12-03 18:06:54,685:INFO:          setuptools: 68.0.0
2024-12-03 18:06:54,685:INFO:             pycaret: 3.3.2
2024-12-03 18:06:54,685:INFO:             IPython: 8.15.0
2024-12-03 18:06:54,685:INFO:          ipywidgets: 8.0.4
2024-12-03 18:06:54,685:INFO:                tqdm: 4.65.0
2024-12-03 18:06:54,685:INFO:               numpy: 1.24.3
2024-12-03 18:06:54,685:INFO:              pandas: 2.0.3
2024-12-03 18:06:54,685:INFO:              jinja2: 3.1.2
2024-12-03 18:06:54,685:INFO:               scipy: 1.11.1
2024-12-03 18:06:54,685:INFO:              joblib: 1.2.0
2024-12-03 18:06:54,685:INFO:             sklearn: 1.4.2
2024-12-03 18:06:54,685:INFO:                pyod: 2.0.2
2024-12-03 18:06:54,685:INFO:            imblearn: 0.12.3
2024-12-03 18:06:54,685:INFO:   category_encoders: 2.6.3
2024-12-03 18:06:54,685:INFO:            lightgbm: 4.5.0
2024-12-03 18:06:54,685:INFO:               numba: 0.57.1
2024-12-03 18:06:54,685:INFO:            requests: 2.31.0
2024-12-03 18:06:54,685:INFO:          matplotlib: 3.7.2
2024-12-03 18:06:54,685:INFO:          scikitplot: 0.3.7
2024-12-03 18:06:54,685:INFO:         yellowbrick: 1.5
2024-12-03 18:06:54,685:INFO:              plotly: 5.24.0
2024-12-03 18:06:54,685:INFO:    plotly-resampler: Not installed
2024-12-03 18:06:54,685:INFO:             kaleido: 0.2.1
2024-12-03 18:06:54,685:INFO:           schemdraw: 0.15
2024-12-03 18:06:54,685:INFO:         statsmodels: 0.14.0
2024-12-03 18:06:54,685:INFO:              sktime: 0.26.0
2024-12-03 18:06:54,685:INFO:               tbats: 1.1.3
2024-12-03 18:06:54,685:INFO:            pmdarima: 2.0.4
2024-12-03 18:06:54,685:INFO:              psutil: 5.9.0
2024-12-03 18:06:54,685:INFO:          markupsafe: 2.1.1
2024-12-03 18:06:54,685:INFO:             pickle5: Not installed
2024-12-03 18:06:54,685:INFO:         cloudpickle: 2.2.1
2024-12-03 18:06:54,685:INFO:         deprecation: 2.1.0
2024-12-03 18:06:54,685:INFO:              xxhash: 2.0.2
2024-12-03 18:06:54,685:INFO:           wurlitzer: Not installed
2024-12-03 18:06:54,685:INFO:PyCaret optional dependencies:
2024-12-03 18:06:54,685:INFO:                shap: 0.46.0
2024-12-03 18:06:54,685:INFO:           interpret: Not installed
2024-12-03 18:06:54,685:INFO:                umap: 0.5.6
2024-12-03 18:06:54,685:INFO:     ydata_profiling: Not installed
2024-12-03 18:06:54,685:INFO:  explainerdashboard: Not installed
2024-12-03 18:06:54,685:INFO:             autoviz: Not installed
2024-12-03 18:06:54,685:INFO:           fairlearn: Not installed
2024-12-03 18:06:54,685:INFO:          deepchecks: Not installed
2024-12-03 18:06:54,685:INFO:             xgboost: 2.1.1
2024-12-03 18:06:54,685:INFO:            catboost: Not installed
2024-12-03 18:06:54,685:INFO:              kmodes: Not installed
2024-12-03 18:06:54,685:INFO:             mlxtend: Not installed
2024-12-03 18:06:54,685:INFO:       statsforecast: Not installed
2024-12-03 18:06:54,685:INFO:        tune_sklearn: Not installed
2024-12-03 18:06:54,685:INFO:                 ray: Not installed
2024-12-03 18:06:54,685:INFO:            hyperopt: Not installed
2024-12-03 18:06:54,685:INFO:              optuna: Not installed
2024-12-03 18:06:54,685:INFO:               skopt: Not installed
2024-12-03 18:06:54,685:INFO:              mlflow: 2.16.2
2024-12-03 18:06:54,685:INFO:              gradio: Not installed
2024-12-03 18:06:54,685:INFO:             fastapi: Not installed
2024-12-03 18:06:54,685:INFO:             uvicorn: Not installed
2024-12-03 18:06:54,685:INFO:              m2cgen: Not installed
2024-12-03 18:06:54,685:INFO:           evidently: Not installed
2024-12-03 18:06:54,685:INFO:               fugue: Not installed
2024-12-03 18:06:54,685:INFO:           streamlit: Not installed
2024-12-03 18:06:54,685:INFO:             prophet: Not installed
2024-12-03 18:06:54,685:INFO:None
2024-12-03 18:06:54,685:INFO:Set up data.
2024-12-03 18:06:55,154:INFO:Set up folding strategy.
2024-12-03 18:06:55,154:INFO:Set up train/test split.
2024-12-03 18:06:55,447:INFO:Set up index.
2024-12-03 18:06:55,464:INFO:Assigning column types.
2024-12-03 18:06:55,785:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-12-03 18:06:55,814:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 18:06:55,814:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-12-03 18:06:55,834:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:06:55,834:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:06:55,864:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-12-03 18:06:55,864:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-12-03 18:06:55,881:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:06:55,885:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:06:55,885:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-12-03 18:06:55,897:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-12-03 18:06:55,913:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:06:55,913:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:06:55,946:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-12-03 18:06:55,949:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:06:55,949:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:06:55,963:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-12-03 18:06:55,998:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:06:55,998:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:06:56,031:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:06:56,031:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:06:56,031:INFO:Preparing preprocessing pipeline...
2024-12-03 18:06:56,066:INFO:Set up label encoding.
2024-12-03 18:06:56,066:INFO:Set up simple imputation.
2024-12-03 18:06:56,284:INFO:Set up encoding of ordinal features.
2024-12-03 18:06:56,346:INFO:Set up encoding of categorical features.
2024-12-03 18:06:56,364:INFO:Set up column name cleaning.
2024-12-03 18:06:59,048:INFO:Finished creating preprocessing pipeline.
2024-12-03 18:06:59,064:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\shaki\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['AAMDC', 'AASDHPPT', 'ABAT',
                                             'ABCB10', 'ABCC2', 'ABCC4',
                                             'ABCC9', 'ABCD3', 'ABCF1',
                                             'ABHD13', 'ABHD2', 'ABHD4',...
                                    transformer=OrdinalEncoder(cols=['Sex'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Sex',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-12-03 18:06:59,064:INFO:Creating final display dataframe.
2024-12-03 18:07:00,849:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 0.53s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = self._memory_full_transform(

2024-12-03 18:07:04,133:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\pycaret\internal\pipeline.py:289: UserWarning: Persisting input arguments took 0.55s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = self._memory_full_transform(

2024-12-03 18:07:05,331:INFO:Setup _display_container:                     Description                 Value
0                    Session id                   123
1                        Target             Mortality
2                   Target type                Binary
3                Target mapping  Dead: 0, Survived: 1
4           Original data shape           (768, 3203)
5        Transformed data shape           (768, 3203)
6   Transformed train set shape           (537, 3203)
7    Transformed test set shape           (231, 3203)
8              Numeric features                  3201
9          Categorical features                     1
10     Rows with missing values                  0.1%
11                   Preprocess                  True
12              Imputation type                simple
13           Numeric imputation                  mean
14       Categorical imputation                  mode
15     Maximum one-hot encoding                    25
16              Encoding method                  None
17               Fold Generator       StratifiedKFold
18                  Fold Number                    10
19                     CPU Jobs                    -1
20                      Use GPU                 False
21               Log Experiment                 False
22              Experiment Name      clf-default-name
23                          USI                  43fa
2024-12-03 18:07:05,386:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:07:05,388:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:07:05,429:INFO:Soft dependency imported: xgboost: 2.1.1
2024-12-03 18:07:05,432:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-12-03 18:07:05,433:INFO:setup() successfully completed in 10.75s...............
2024-12-03 18:07:05,434:INFO:Initializing compare_models()
2024-12-03 18:07:05,434:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-12-03 18:07:05,434:INFO:Checking exceptions
2024-12-03 18:07:05,684:INFO:Preparing display monitor
2024-12-03 18:07:05,706:INFO:Initializing Logistic Regression
2024-12-03 18:07:05,706:INFO:Total runtime is 0.0 minutes
2024-12-03 18:07:05,709:INFO:SubProcess create_model() called ==================================
2024-12-03 18:07:05,710:INFO:Initializing create_model()
2024-12-03 18:07:05,710:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:07:05,710:INFO:Checking exceptions
2024-12-03 18:07:05,710:INFO:Importing libraries
2024-12-03 18:07:05,710:INFO:Copying training dataset
2024-12-03 18:07:06,050:INFO:Defining folds
2024-12-03 18:07:06,050:INFO:Declaring metric variables
2024-12-03 18:07:06,052:INFO:Importing untrained model
2024-12-03 18:07:06,054:INFO:Logistic Regression Imported successfully
2024-12-03 18:07:06,058:INFO:Starting cross validation
2024-12-03 18:07:06,064:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:07:28,898:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-12-03 18:07:29,437:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-12-03 18:07:30,031:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-12-03 18:07:30,300:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-12-03 18:07:30,464:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-12-03 18:07:30,797:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-12-03 18:07:30,817:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-12-03 18:07:30,847:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-12-03 18:07:30,915:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-12-03 18:07:30,964:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-12-03 18:07:34,364:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:34,364:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:34,364:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:34,818:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:34,831:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:34,836:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,430:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,430:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,430:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,477:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,497:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,500:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,582:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,598:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,598:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,880:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,880:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,880:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,895:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,895:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,895:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,895:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,915:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,918:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,933:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,933:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,948:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,948:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,948:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,964:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:35,964:INFO:Calculating mean and std
2024-12-03 18:07:35,980:INFO:Creating metrics dataframe
2024-12-03 18:07:35,980:INFO:Uploading results into container
2024-12-03 18:07:35,980:INFO:Uploading model into container now
2024-12-03 18:07:35,980:INFO:_master_model_container: 1
2024-12-03 18:07:35,980:INFO:_display_container: 2
2024-12-03 18:07:35,980:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-12-03 18:07:35,987:INFO:create_model() successfully completed......................................
2024-12-03 18:07:36,127:INFO:SubProcess create_model() end ==================================
2024-12-03 18:07:36,127:INFO:Creating metrics dataframe
2024-12-03 18:07:36,133:INFO:Initializing K Neighbors Classifier
2024-12-03 18:07:36,133:INFO:Total runtime is 0.5071195403734843 minutes
2024-12-03 18:07:36,135:INFO:SubProcess create_model() called ==================================
2024-12-03 18:07:36,135:INFO:Initializing create_model()
2024-12-03 18:07:36,136:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:07:36,136:INFO:Checking exceptions
2024-12-03 18:07:36,136:INFO:Importing libraries
2024-12-03 18:07:36,136:INFO:Copying training dataset
2024-12-03 18:07:36,498:INFO:Defining folds
2024-12-03 18:07:36,498:INFO:Declaring metric variables
2024-12-03 18:07:36,501:INFO:Importing untrained model
2024-12-03 18:07:36,503:INFO:K Neighbors Classifier Imported successfully
2024-12-03 18:07:36,503:INFO:Starting cross validation
2024-12-03 18:07:36,516:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:07:47,430:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:47,441:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:47,446:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:47,764:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:47,780:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:47,780:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:47,835:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:47,835:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:47,842:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:47,964:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:47,964:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:47,964:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:48,030:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:48,030:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:48,042:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:48,099:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:48,103:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:48,106:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:48,281:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:48,281:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:48,281:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:48,302:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:48,306:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:48,309:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:50,714:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:50,714:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:50,714:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:50,731:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:50,731:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:50,731:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:07:50,747:INFO:Calculating mean and std
2024-12-03 18:07:50,747:INFO:Creating metrics dataframe
2024-12-03 18:07:50,747:INFO:Uploading results into container
2024-12-03 18:07:50,747:INFO:Uploading model into container now
2024-12-03 18:07:50,747:INFO:_master_model_container: 2
2024-12-03 18:07:50,747:INFO:_display_container: 2
2024-12-03 18:07:50,747:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-12-03 18:07:50,747:INFO:create_model() successfully completed......................................
2024-12-03 18:07:50,865:INFO:SubProcess create_model() end ==================================
2024-12-03 18:07:50,865:INFO:Creating metrics dataframe
2024-12-03 18:07:50,884:INFO:Initializing Naive Bayes
2024-12-03 18:07:50,884:INFO:Total runtime is 0.7529662251472473 minutes
2024-12-03 18:07:50,884:INFO:SubProcess create_model() called ==================================
2024-12-03 18:07:50,884:INFO:Initializing create_model()
2024-12-03 18:07:50,884:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:07:50,884:INFO:Checking exceptions
2024-12-03 18:07:50,884:INFO:Importing libraries
2024-12-03 18:07:50,884:INFO:Copying training dataset
2024-12-03 18:07:51,259:INFO:Defining folds
2024-12-03 18:07:51,259:INFO:Declaring metric variables
2024-12-03 18:07:51,261:INFO:Importing untrained model
2024-12-03 18:07:51,265:INFO:Naive Bayes Imported successfully
2024-12-03 18:07:51,265:INFO:Starting cross validation
2024-12-03 18:07:51,265:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:08:01,764:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:01,781:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:01,781:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:01,948:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:01,948:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:01,953:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,131:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,131:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,147:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,314:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,314:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,330:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,354:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,363:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,364:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,400:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,403:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,406:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,567:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,567:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,567:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,608:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,610:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,612:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,709:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,711:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,713:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,855:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,855:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,855:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:02,864:INFO:Calculating mean and std
2024-12-03 18:08:02,864:INFO:Creating metrics dataframe
2024-12-03 18:08:02,870:INFO:Uploading results into container
2024-12-03 18:08:02,871:INFO:Uploading model into container now
2024-12-03 18:08:02,871:INFO:_master_model_container: 3
2024-12-03 18:08:02,871:INFO:_display_container: 2
2024-12-03 18:08:02,871:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-12-03 18:08:02,871:INFO:create_model() successfully completed......................................
2024-12-03 18:08:03,004:INFO:SubProcess create_model() end ==================================
2024-12-03 18:08:03,004:INFO:Creating metrics dataframe
2024-12-03 18:08:03,011:INFO:Initializing Decision Tree Classifier
2024-12-03 18:08:03,011:INFO:Total runtime is 0.9550777157147725 minutes
2024-12-03 18:08:03,013:INFO:SubProcess create_model() called ==================================
2024-12-03 18:08:03,013:INFO:Initializing create_model()
2024-12-03 18:08:03,013:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:08:03,013:INFO:Checking exceptions
2024-12-03 18:08:03,013:INFO:Importing libraries
2024-12-03 18:08:03,013:INFO:Copying training dataset
2024-12-03 18:08:03,392:INFO:Defining folds
2024-12-03 18:08:03,393:INFO:Declaring metric variables
2024-12-03 18:08:03,395:INFO:Importing untrained model
2024-12-03 18:08:03,398:INFO:Decision Tree Classifier Imported successfully
2024-12-03 18:08:03,400:INFO:Starting cross validation
2024-12-03 18:08:03,400:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:08:15,514:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:15,535:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:15,535:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:15,918:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:15,918:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:15,930:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:16,549:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:16,549:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:16,549:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:16,609:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:16,613:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:16,615:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:16,847:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:16,847:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:16,847:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,147:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,147:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,147:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,165:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,165:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,165:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,180:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,183:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,183:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,383:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,384:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,384:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,414:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,414:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,414:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:17,431:INFO:Calculating mean and std
2024-12-03 18:08:17,431:INFO:Creating metrics dataframe
2024-12-03 18:08:17,431:INFO:Uploading results into container
2024-12-03 18:08:17,431:INFO:Uploading model into container now
2024-12-03 18:08:17,431:INFO:_master_model_container: 4
2024-12-03 18:08:17,431:INFO:_display_container: 2
2024-12-03 18:08:17,431:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-12-03 18:08:17,431:INFO:create_model() successfully completed......................................
2024-12-03 18:08:17,563:INFO:SubProcess create_model() end ==================================
2024-12-03 18:08:17,563:INFO:Creating metrics dataframe
2024-12-03 18:08:17,566:INFO:Initializing SVM - Linear Kernel
2024-12-03 18:08:17,566:INFO:Total runtime is 1.1976681431134542 minutes
2024-12-03 18:08:17,566:INFO:SubProcess create_model() called ==================================
2024-12-03 18:08:17,566:INFO:Initializing create_model()
2024-12-03 18:08:17,566:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:08:17,566:INFO:Checking exceptions
2024-12-03 18:08:17,566:INFO:Importing libraries
2024-12-03 18:08:17,566:INFO:Copying training dataset
2024-12-03 18:08:17,933:INFO:Defining folds
2024-12-03 18:08:17,933:INFO:Declaring metric variables
2024-12-03 18:08:17,933:INFO:Importing untrained model
2024-12-03 18:08:17,948:INFO:SVM - Linear Kernel Imported successfully
2024-12-03 18:08:17,948:INFO:Starting cross validation
2024-12-03 18:08:17,948:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:08:29,904:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:29,907:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:29,909:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-03 18:08:29,911:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,130:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,130:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,130:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,448:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,448:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,448:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,581:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,581:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,581:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,614:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,629:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,631:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,700:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,702:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,705:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,917:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,917:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,917:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,964:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,964:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:30,976:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:31,108:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:31,110:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:31,112:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:31,165:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:31,165:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:31,165:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:31,181:INFO:Calculating mean and std
2024-12-03 18:08:31,182:INFO:Creating metrics dataframe
2024-12-03 18:08:31,182:INFO:Uploading results into container
2024-12-03 18:08:31,182:INFO:Uploading model into container now
2024-12-03 18:08:31,182:INFO:_master_model_container: 5
2024-12-03 18:08:31,182:INFO:_display_container: 2
2024-12-03 18:08:31,182:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-12-03 18:08:31,182:INFO:create_model() successfully completed......................................
2024-12-03 18:08:31,309:INFO:SubProcess create_model() end ==================================
2024-12-03 18:08:31,310:INFO:Creating metrics dataframe
2024-12-03 18:08:31,314:INFO:Initializing Ridge Classifier
2024-12-03 18:08:31,314:INFO:Total runtime is 1.4267919540405274 minutes
2024-12-03 18:08:31,314:INFO:SubProcess create_model() called ==================================
2024-12-03 18:08:31,314:INFO:Initializing create_model()
2024-12-03 18:08:31,314:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:08:31,314:INFO:Checking exceptions
2024-12-03 18:08:31,314:INFO:Importing libraries
2024-12-03 18:08:31,314:INFO:Copying training dataset
2024-12-03 18:08:31,682:INFO:Defining folds
2024-12-03 18:08:31,682:INFO:Declaring metric variables
2024-12-03 18:08:31,682:INFO:Importing untrained model
2024-12-03 18:08:31,689:INFO:Ridge Classifier Imported successfully
2024-12-03 18:08:31,689:INFO:Starting cross validation
2024-12-03 18:08:31,702:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:08:43,830:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:43,830:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:43,847:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:43,886:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:43,886:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:43,897:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:43,951:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:43,964:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:43,966:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,315:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,315:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,315:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,431:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,431:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,441:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,486:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,486:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,498:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,581:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,581:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,586:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,764:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,764:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,784:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,881:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,881:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,881:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,881:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,881:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,886:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:08:44,886:INFO:Calculating mean and std
2024-12-03 18:08:44,886:INFO:Creating metrics dataframe
2024-12-03 18:08:44,897:INFO:Uploading results into container
2024-12-03 18:08:44,898:INFO:Uploading model into container now
2024-12-03 18:08:44,898:INFO:_master_model_container: 6
2024-12-03 18:08:44,898:INFO:_display_container: 2
2024-12-03 18:08:44,899:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-12-03 18:08:44,899:INFO:create_model() successfully completed......................................
2024-12-03 18:08:45,014:INFO:SubProcess create_model() end ==================================
2024-12-03 18:08:45,014:INFO:Creating metrics dataframe
2024-12-03 18:08:45,033:INFO:Initializing Random Forest Classifier
2024-12-03 18:08:45,033:INFO:Total runtime is 1.6554450233777365 minutes
2024-12-03 18:08:45,033:INFO:SubProcess create_model() called ==================================
2024-12-03 18:08:45,033:INFO:Initializing create_model()
2024-12-03 18:08:45,033:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:08:45,033:INFO:Checking exceptions
2024-12-03 18:08:45,033:INFO:Importing libraries
2024-12-03 18:08:45,033:INFO:Copying training dataset
2024-12-03 18:08:45,423:INFO:Defining folds
2024-12-03 18:08:45,423:INFO:Declaring metric variables
2024-12-03 18:08:45,426:INFO:Importing untrained model
2024-12-03 18:08:45,428:INFO:Random Forest Classifier Imported successfully
2024-12-03 18:08:45,431:INFO:Starting cross validation
2024-12-03 18:08:45,431:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:09:00,503:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:00,508:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:00,515:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:00,716:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:00,716:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:00,716:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:00,731:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:00,731:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:00,748:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,117:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,117:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,117:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,147:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,147:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,147:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,299:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,302:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,304:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,347:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,367:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,367:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,480:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,498:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,501:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,597:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,599:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,602:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,630:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,630:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,630:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:01,649:INFO:Calculating mean and std
2024-12-03 18:09:01,649:INFO:Creating metrics dataframe
2024-12-03 18:09:01,649:INFO:Uploading results into container
2024-12-03 18:09:01,649:INFO:Uploading model into container now
2024-12-03 18:09:01,649:INFO:_master_model_container: 7
2024-12-03 18:09:01,649:INFO:_display_container: 2
2024-12-03 18:09:01,649:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-12-03 18:09:01,649:INFO:create_model() successfully completed......................................
2024-12-03 18:09:01,782:INFO:SubProcess create_model() end ==================================
2024-12-03 18:09:01,785:INFO:Creating metrics dataframe
2024-12-03 18:09:01,786:INFO:Initializing Quadratic Discriminant Analysis
2024-12-03 18:09:01,786:INFO:Total runtime is 1.9346659183502197 minutes
2024-12-03 18:09:01,786:INFO:SubProcess create_model() called ==================================
2024-12-03 18:09:01,786:INFO:Initializing create_model()
2024-12-03 18:09:01,786:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:09:01,786:INFO:Checking exceptions
2024-12-03 18:09:01,786:INFO:Importing libraries
2024-12-03 18:09:01,786:INFO:Copying training dataset
2024-12-03 18:09:02,166:INFO:Defining folds
2024-12-03 18:09:02,166:INFO:Declaring metric variables
2024-12-03 18:09:02,169:INFO:Importing untrained model
2024-12-03 18:09:02,172:INFO:Quadratic Discriminant Analysis Imported successfully
2024-12-03 18:09:02,175:INFO:Starting cross validation
2024-12-03 18:09:02,182:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:09:08,209:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-03 18:09:08,584:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-03 18:09:08,915:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-03 18:09:09,065:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-03 18:09:09,085:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-03 18:09:09,647:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-03 18:09:09,864:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-03 18:09:09,864:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-03 18:09:10,214:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-03 18:09:10,382:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-12-03 18:09:15,085:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,100:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,105:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,466:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,482:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,482:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,619:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,631:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,631:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,814:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,814:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,814:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,847:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,865:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:15,868:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,082:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,082:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,082:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,248:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,248:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,248:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,307:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,309:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,312:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,405:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,407:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,409:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,483:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,483:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,483:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:16,483:INFO:Calculating mean and std
2024-12-03 18:09:16,483:INFO:Creating metrics dataframe
2024-12-03 18:09:16,497:INFO:Uploading results into container
2024-12-03 18:09:16,498:INFO:Uploading model into container now
2024-12-03 18:09:16,498:INFO:_master_model_container: 8
2024-12-03 18:09:16,498:INFO:_display_container: 2
2024-12-03 18:09:16,499:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-12-03 18:09:16,499:INFO:create_model() successfully completed......................................
2024-12-03 18:09:16,614:INFO:SubProcess create_model() end ==================================
2024-12-03 18:09:16,614:INFO:Creating metrics dataframe
2024-12-03 18:09:16,630:INFO:Initializing Ada Boost Classifier
2024-12-03 18:09:16,630:INFO:Total runtime is 2.1820571223894754 minutes
2024-12-03 18:09:16,630:INFO:SubProcess create_model() called ==================================
2024-12-03 18:09:16,630:INFO:Initializing create_model()
2024-12-03 18:09:16,630:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:09:16,630:INFO:Checking exceptions
2024-12-03 18:09:16,630:INFO:Importing libraries
2024-12-03 18:09:16,630:INFO:Copying training dataset
2024-12-03 18:09:17,005:INFO:Defining folds
2024-12-03 18:09:17,005:INFO:Declaring metric variables
2024-12-03 18:09:17,008:INFO:Importing untrained model
2024-12-03 18:09:17,010:INFO:Ada Boost Classifier Imported successfully
2024-12-03 18:09:17,016:INFO:Starting cross validation
2024-12-03 18:09:17,017:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:09:23,048:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-03 18:09:23,118:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-03 18:09:23,436:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-03 18:09:23,615:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-03 18:09:23,865:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-03 18:09:23,934:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-03 18:09:24,014:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-03 18:09:24,247:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-03 18:09:24,431:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-03 18:09:24,535:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-12-03 18:09:46,134:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,148:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,148:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,214:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,214:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,214:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,347:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,364:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,364:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,500:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,502:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,502:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,615:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,615:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,615:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,635:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,635:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,635:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,882:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,882:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,898:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,981:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,997:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,997:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:46,997:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:47,015:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:47,015:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:47,164:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:47,181:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:47,181:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:09:47,181:INFO:Calculating mean and std
2024-12-03 18:09:47,181:INFO:Creating metrics dataframe
2024-12-03 18:09:47,181:INFO:Uploading results into container
2024-12-03 18:09:47,181:INFO:Uploading model into container now
2024-12-03 18:09:47,181:INFO:_master_model_container: 9
2024-12-03 18:09:47,181:INFO:_display_container: 2
2024-12-03 18:09:47,181:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-12-03 18:09:47,181:INFO:create_model() successfully completed......................................
2024-12-03 18:09:47,314:INFO:SubProcess create_model() end ==================================
2024-12-03 18:09:47,314:INFO:Creating metrics dataframe
2024-12-03 18:09:47,314:INFO:Initializing Gradient Boosting Classifier
2024-12-03 18:09:47,314:INFO:Total runtime is 2.693468674023946 minutes
2024-12-03 18:09:47,335:INFO:SubProcess create_model() called ==================================
2024-12-03 18:09:47,335:INFO:Initializing create_model()
2024-12-03 18:09:47,335:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:09:47,335:INFO:Checking exceptions
2024-12-03 18:09:47,335:INFO:Importing libraries
2024-12-03 18:09:47,335:INFO:Copying training dataset
2024-12-03 18:09:47,707:INFO:Defining folds
2024-12-03 18:09:47,707:INFO:Declaring metric variables
2024-12-03 18:09:47,711:INFO:Importing untrained model
2024-12-03 18:09:47,715:INFO:Gradient Boosting Classifier Imported successfully
2024-12-03 18:09:47,715:INFO:Starting cross validation
2024-12-03 18:09:47,733:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:11:24,232:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:24,232:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:24,232:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:24,520:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:24,520:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:24,520:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:24,581:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:24,599:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:24,604:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:24,909:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:24,914:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:24,915:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,149:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,153:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,153:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,285:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,285:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,285:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,381:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,381:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,381:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,515:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,515:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,515:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,531:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,531:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,531:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,633:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,633:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,633:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:25,648:INFO:Calculating mean and std
2024-12-03 18:11:25,648:INFO:Creating metrics dataframe
2024-12-03 18:11:25,655:INFO:Uploading results into container
2024-12-03 18:11:25,657:INFO:Uploading model into container now
2024-12-03 18:11:25,657:INFO:_master_model_container: 10
2024-12-03 18:11:25,658:INFO:_display_container: 2
2024-12-03 18:11:25,658:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-12-03 18:11:25,658:INFO:create_model() successfully completed......................................
2024-12-03 18:11:25,784:INFO:SubProcess create_model() end ==================================
2024-12-03 18:11:25,784:INFO:Creating metrics dataframe
2024-12-03 18:11:25,799:INFO:Initializing Linear Discriminant Analysis
2024-12-03 18:11:25,799:INFO:Total runtime is 4.334878993034363 minutes
2024-12-03 18:11:25,801:INFO:SubProcess create_model() called ==================================
2024-12-03 18:11:25,802:INFO:Initializing create_model()
2024-12-03 18:11:25,802:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:11:25,802:INFO:Checking exceptions
2024-12-03 18:11:25,802:INFO:Importing libraries
2024-12-03 18:11:25,802:INFO:Copying training dataset
2024-12-03 18:11:26,201:INFO:Defining folds
2024-12-03 18:11:26,201:INFO:Declaring metric variables
2024-12-03 18:11:26,201:INFO:Importing untrained model
2024-12-03 18:11:26,201:INFO:Linear Discriminant Analysis Imported successfully
2024-12-03 18:11:26,201:INFO:Starting cross validation
2024-12-03 18:11:26,216:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:11:40,231:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:40,231:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:40,248:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:40,530:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:40,536:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:40,536:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:40,748:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:40,748:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:40,748:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,014:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,014:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,014:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,348:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,348:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,348:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,365:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,365:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,381:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,431:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,431:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,431:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,469:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,469:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,481:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,549:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,565:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,565:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,581:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,581:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,581:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:41,602:INFO:Calculating mean and std
2024-12-03 18:11:41,604:INFO:Creating metrics dataframe
2024-12-03 18:11:41,605:INFO:Uploading results into container
2024-12-03 18:11:41,606:INFO:Uploading model into container now
2024-12-03 18:11:41,606:INFO:_master_model_container: 11
2024-12-03 18:11:41,606:INFO:_display_container: 2
2024-12-03 18:11:41,607:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-12-03 18:11:41,607:INFO:create_model() successfully completed......................................
2024-12-03 18:11:41,732:INFO:SubProcess create_model() end ==================================
2024-12-03 18:11:41,732:INFO:Creating metrics dataframe
2024-12-03 18:11:41,732:INFO:Initializing Extra Trees Classifier
2024-12-03 18:11:41,732:INFO:Total runtime is 4.600435495376587 minutes
2024-12-03 18:11:41,732:INFO:SubProcess create_model() called ==================================
2024-12-03 18:11:41,732:INFO:Initializing create_model()
2024-12-03 18:11:41,732:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:11:41,732:INFO:Checking exceptions
2024-12-03 18:11:41,732:INFO:Importing libraries
2024-12-03 18:11:41,732:INFO:Copying training dataset
2024-12-03 18:11:42,129:INFO:Defining folds
2024-12-03 18:11:42,129:INFO:Declaring metric variables
2024-12-03 18:11:42,131:INFO:Importing untrained model
2024-12-03 18:11:42,135:INFO:Extra Trees Classifier Imported successfully
2024-12-03 18:11:42,135:INFO:Starting cross validation
2024-12-03 18:11:42,149:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:11:54,931:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:54,948:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:54,948:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,132:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,132:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,132:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,248:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,264:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,264:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,348:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,348:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,365:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,482:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,485:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,485:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,666:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,666:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,666:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,748:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,750:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,753:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,833:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,833:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,833:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,932:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,932:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:55,932:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:56,031:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:56,031:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:56,031:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:11:56,046:INFO:Calculating mean and std
2024-12-03 18:11:56,047:INFO:Creating metrics dataframe
2024-12-03 18:11:56,048:INFO:Uploading results into container
2024-12-03 18:11:56,048:INFO:Uploading model into container now
2024-12-03 18:11:56,048:INFO:_master_model_container: 12
2024-12-03 18:11:56,048:INFO:_display_container: 2
2024-12-03 18:11:56,048:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-12-03 18:11:56,048:INFO:create_model() successfully completed......................................
2024-12-03 18:11:56,166:INFO:SubProcess create_model() end ==================================
2024-12-03 18:11:56,166:INFO:Creating metrics dataframe
2024-12-03 18:11:56,182:INFO:Initializing Extreme Gradient Boosting
2024-12-03 18:11:56,182:INFO:Total runtime is 4.841258211930593 minutes
2024-12-03 18:11:56,184:INFO:SubProcess create_model() called ==================================
2024-12-03 18:11:56,184:INFO:Initializing create_model()
2024-12-03 18:11:56,184:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:11:56,184:INFO:Checking exceptions
2024-12-03 18:11:56,184:INFO:Importing libraries
2024-12-03 18:11:56,184:INFO:Copying training dataset
2024-12-03 18:11:56,597:INFO:Defining folds
2024-12-03 18:11:56,598:INFO:Declaring metric variables
2024-12-03 18:11:56,600:INFO:Importing untrained model
2024-12-03 18:11:56,605:INFO:Extreme Gradient Boosting Imported successfully
2024-12-03 18:11:56,605:INFO:Starting cross validation
2024-12-03 18:11:56,617:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:12:46,918:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:46,933:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:46,933:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:47,768:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:47,783:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:47,783:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:47,883:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:47,883:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:47,900:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:48,416:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:48,416:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:48,416:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:48,516:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:48,516:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:48,516:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,166:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,181:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,184:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,216:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,216:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,216:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,251:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,251:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,266:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,350:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,350:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,365:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,534:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,550:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,550:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:12:49,550:INFO:Calculating mean and std
2024-12-03 18:12:49,565:INFO:Creating metrics dataframe
2024-12-03 18:12:49,570:INFO:Uploading results into container
2024-12-03 18:12:49,571:INFO:Uploading model into container now
2024-12-03 18:12:49,573:INFO:_master_model_container: 13
2024-12-03 18:12:49,573:INFO:_display_container: 2
2024-12-03 18:12:49,573:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-12-03 18:12:49,573:INFO:create_model() successfully completed......................................
2024-12-03 18:12:49,715:INFO:SubProcess create_model() end ==================================
2024-12-03 18:12:49,715:INFO:Creating metrics dataframe
2024-12-03 18:12:49,715:INFO:Initializing Light Gradient Boosting Machine
2024-12-03 18:12:49,715:INFO:Total runtime is 5.733480556805929 minutes
2024-12-03 18:12:49,730:INFO:SubProcess create_model() called ==================================
2024-12-03 18:12:49,731:INFO:Initializing create_model()
2024-12-03 18:12:49,731:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:12:49,731:INFO:Checking exceptions
2024-12-03 18:12:49,731:INFO:Importing libraries
2024-12-03 18:12:49,731:INFO:Copying training dataset
2024-12-03 18:12:50,114:INFO:Defining folds
2024-12-03 18:12:50,114:INFO:Declaring metric variables
2024-12-03 18:12:50,114:INFO:Importing untrained model
2024-12-03 18:12:50,129:INFO:Light Gradient Boosting Machine Imported successfully
2024-12-03 18:12:50,132:INFO:Starting cross validation
2024-12-03 18:12:50,132:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:13:27,934:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:27,952:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:27,952:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:28,631:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:28,652:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:28,652:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:28,652:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:28,652:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:28,663:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:29,215:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:29,231:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:29,231:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:29,515:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:29,531:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:29,531:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:29,614:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:29,616:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:29,616:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:29,616:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:29,616:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:29,631:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:30,148:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:30,155:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:30,155:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:30,519:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:30,519:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:30,531:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:30,951:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:30,955:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:30,955:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:30,966:INFO:Calculating mean and std
2024-12-03 18:13:30,966:INFO:Creating metrics dataframe
2024-12-03 18:13:30,982:INFO:Uploading results into container
2024-12-03 18:13:30,984:INFO:Uploading model into container now
2024-12-03 18:13:30,984:INFO:_master_model_container: 14
2024-12-03 18:13:30,985:INFO:_display_container: 2
2024-12-03 18:13:30,986:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-12-03 18:13:30,986:INFO:create_model() successfully completed......................................
2024-12-03 18:13:31,167:INFO:SubProcess create_model() end ==================================
2024-12-03 18:13:31,168:INFO:Creating metrics dataframe
2024-12-03 18:13:31,177:INFO:Initializing Dummy Classifier
2024-12-03 18:13:31,177:INFO:Total runtime is 6.4245217680931095 minutes
2024-12-03 18:13:31,181:INFO:SubProcess create_model() called ==================================
2024-12-03 18:13:31,182:INFO:Initializing create_model()
2024-12-03 18:13:31,182:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F09E551A50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:13:31,182:INFO:Checking exceptions
2024-12-03 18:13:31,182:INFO:Importing libraries
2024-12-03 18:13:31,182:INFO:Copying training dataset
2024-12-03 18:13:31,648:INFO:Defining folds
2024-12-03 18:13:31,648:INFO:Declaring metric variables
2024-12-03 18:13:31,656:INFO:Importing untrained model
2024-12-03 18:13:31,659:INFO:Dummy Classifier Imported successfully
2024-12-03 18:13:31,667:INFO:Starting cross validation
2024-12-03 18:13:31,669:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:13:45,171:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,181:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,181:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-03 18:13:45,181:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,380:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,385:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,385:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-03 18:13:45,385:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,482:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,503:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,506:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-03 18:13:45,509:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,772:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,783:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,785:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-03 18:13:45,788:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,814:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,815:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,815:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-03 18:13:45,815:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,815:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,835:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:45,836:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-03 18:13:45,836:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:46,082:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:46,082:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:46,098:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-03 18:13:46,100:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:46,118:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:46,118:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:46,131:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-03 18:13:46,133:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:46,182:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:46,182:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:46,182:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-03 18:13:46,198:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:46,365:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:46,374:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:46,374:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-12-03 18:13:46,374:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:13:46,381:INFO:Calculating mean and std
2024-12-03 18:13:46,381:INFO:Creating metrics dataframe
2024-12-03 18:13:46,381:INFO:Uploading results into container
2024-12-03 18:13:46,381:INFO:Uploading model into container now
2024-12-03 18:13:46,381:INFO:_master_model_container: 15
2024-12-03 18:13:46,381:INFO:_display_container: 2
2024-12-03 18:13:46,381:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-12-03 18:13:46,381:INFO:create_model() successfully completed......................................
2024-12-03 18:13:46,529:INFO:SubProcess create_model() end ==================================
2024-12-03 18:13:46,529:INFO:Creating metrics dataframe
2024-12-03 18:13:46,549:INFO:Initializing create_model()
2024-12-03 18:13:46,549:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:13:46,549:INFO:Checking exceptions
2024-12-03 18:13:46,549:INFO:Importing libraries
2024-12-03 18:13:46,549:INFO:Copying training dataset
2024-12-03 18:13:46,951:INFO:Defining folds
2024-12-03 18:13:46,951:INFO:Declaring metric variables
2024-12-03 18:13:46,951:INFO:Importing untrained model
2024-12-03 18:13:46,951:INFO:Declaring custom model
2024-12-03 18:13:46,951:INFO:Extreme Gradient Boosting Imported successfully
2024-12-03 18:13:46,951:INFO:Cross validation set to False
2024-12-03 18:13:46,951:INFO:Fitting Model
2024-12-03 18:13:57,693:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-12-03 18:13:57,693:INFO:create_model() successfully completed......................................
2024-12-03 18:13:57,903:INFO:_master_model_container: 15
2024-12-03 18:13:57,904:INFO:_display_container: 2
2024-12-03 18:13:57,904:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-12-03 18:13:57,905:INFO:compare_models() successfully completed......................................
2024-12-03 18:17:29,218:INFO:Initializing tune_model()
2024-12-03 18:17:29,218:INFO:tune_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={})
2024-12-03 18:17:29,218:INFO:Checking exceptions
2024-12-03 18:17:29,326:INFO:Copying training dataset
2024-12-03 18:17:29,631:INFO:Checking base model
2024-12-03 18:17:29,631:INFO:Base model : Extreme Gradient Boosting
2024-12-03 18:17:29,634:INFO:Declaring metric variables
2024-12-03 18:17:29,636:INFO:Defining Hyperparameters
2024-12-03 18:17:29,761:INFO:Tuning with n_jobs=-1
2024-12-03 18:17:29,761:INFO:Initializing RandomizedSearchCV
2024-12-03 18:28:27,602:INFO:best_params: {'actual_estimator__subsample': 0.7, 'actual_estimator__scale_pos_weight': 37.1, 'actual_estimator__reg_lambda': 0.7, 'actual_estimator__reg_alpha': 2, 'actual_estimator__n_estimators': 290, 'actual_estimator__min_child_weight': 3, 'actual_estimator__max_depth': 7, 'actual_estimator__learning_rate': 0.15, 'actual_estimator__colsample_bytree': 0.9}
2024-12-03 18:28:27,602:INFO:Hyperparameter search completed
2024-12-03 18:28:27,602:INFO:SubProcess create_model() called ==================================
2024-12-03 18:28:27,617:INFO:Initializing create_model()
2024-12-03 18:28:27,617:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F0A659F4D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'subsample': 0.7, 'scale_pos_weight': 37.1, 'reg_lambda': 0.7, 'reg_alpha': 2, 'n_estimators': 290, 'min_child_weight': 3, 'max_depth': 7, 'learning_rate': 0.15, 'colsample_bytree': 0.9})
2024-12-03 18:28:27,618:INFO:Checking exceptions
2024-12-03 18:28:27,618:INFO:Importing libraries
2024-12-03 18:28:27,618:INFO:Copying training dataset
2024-12-03 18:28:28,001:INFO:Defining folds
2024-12-03 18:28:28,001:INFO:Declaring metric variables
2024-12-03 18:28:28,015:INFO:Importing untrained model
2024-12-03 18:28:28,015:INFO:Declaring custom model
2024-12-03 18:28:28,018:INFO:Extreme Gradient Boosting Imported successfully
2024-12-03 18:28:28,018:INFO:Starting cross validation
2024-12-03 18:28:28,018:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:29:59,181:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,185:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,185:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,332:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,337:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,337:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,456:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,462:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,471:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,482:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,484:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,484:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,571:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,583:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,584:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,772:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,774:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:29:59,777:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:30:00,234:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:30:00,234:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:30:00,250:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:30:00,278:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:30:00,282:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:30:00,284:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:30:01,150:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:30:01,151:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:30:01,151:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:30:01,272:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:30:01,274:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:30:01,276:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:30:01,285:INFO:Calculating mean and std
2024-12-03 18:30:01,286:INFO:Creating metrics dataframe
2024-12-03 18:30:01,286:INFO:Finalizing model
2024-12-03 18:30:24,489:INFO:Uploading results into container
2024-12-03 18:30:24,492:INFO:Uploading model into container now
2024-12-03 18:30:24,492:INFO:_master_model_container: 16
2024-12-03 18:30:24,492:INFO:_display_container: 3
2024-12-03 18:30:24,492:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=0.9, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=0.15, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=7, max_leaves=None,
              min_child_weight=3, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=290, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-12-03 18:30:24,492:INFO:create_model() successfully completed......................................
2024-12-03 18:30:24,685:INFO:SubProcess create_model() end ==================================
2024-12-03 18:30:24,685:INFO:choose_better activated
2024-12-03 18:30:24,685:INFO:SubProcess create_model() called ==================================
2024-12-03 18:30:24,685:INFO:Initializing create_model()
2024-12-03 18:30:24,685:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-12-03 18:30:24,685:INFO:Checking exceptions
2024-12-03 18:30:24,685:INFO:Importing libraries
2024-12-03 18:30:24,685:INFO:Copying training dataset
2024-12-03 18:30:25,118:INFO:Defining folds
2024-12-03 18:30:25,118:INFO:Declaring metric variables
2024-12-03 18:30:25,118:INFO:Importing untrained model
2024-12-03 18:30:25,118:INFO:Declaring custom model
2024-12-03 18:30:25,118:INFO:Extreme Gradient Boosting Imported successfully
2024-12-03 18:30:25,118:INFO:Starting cross validation
2024-12-03 18:30:25,133:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-12-03 18:31:16,422:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:16,434:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:16,434:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:16,523:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:16,523:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:16,534:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:16,769:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:16,769:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:16,784:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,383:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,384:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,384:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,635:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,635:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,635:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,635:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,650:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,655:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,734:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,734:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,734:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,917:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,918:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:17,918:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:18,018:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:18,018:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:18,018:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:18,203:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:18,203:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:18,203:WARNING:c:\Users\shaki\anaconda3\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Survived') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-12-03 18:31:18,217:INFO:Calculating mean and std
2024-12-03 18:31:18,217:INFO:Creating metrics dataframe
2024-12-03 18:31:18,217:INFO:Finalizing model
2024-12-03 18:31:28,884:INFO:Uploading results into container
2024-12-03 18:31:28,884:INFO:Uploading model into container now
2024-12-03 18:31:28,900:INFO:_master_model_container: 17
2024-12-03 18:31:28,900:INFO:_display_container: 4
2024-12-03 18:31:28,901:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-12-03 18:31:28,901:INFO:create_model() successfully completed......................................
2024-12-03 18:31:29,084:INFO:SubProcess create_model() end ==================================
2024-12-03 18:31:29,084:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...) result for Accuracy is 0.7727
2024-12-03 18:31:29,084:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=0.9, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=0.15, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=7, max_leaves=None,
              min_child_weight=3, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=290, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...) result for Accuracy is 0.7542
2024-12-03 18:31:29,084:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...) is best model
2024-12-03 18:31:29,084:INFO:choose_better completed
2024-12-03 18:31:29,084:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-12-03 18:31:29,100:INFO:_master_model_container: 17
2024-12-03 18:31:29,101:INFO:_display_container: 3
2024-12-03 18:31:29,101:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-12-03 18:31:29,101:INFO:tune_model() successfully completed......................................
2024-12-03 18:34:57,052:INFO:Initializing plot_model()
2024-12-03 18:34:57,053:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), plot=feature, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-12-03 18:34:57,053:INFO:Checking exceptions
2024-12-03 18:34:57,149:INFO:Preloading libraries
2024-12-03 18:34:57,157:INFO:Copying training dataset
2024-12-03 18:34:57,157:INFO:Plot type: feature
2024-12-03 18:34:57,158:WARNING:No coef_ found. Trying feature_importances_
2024-12-03 18:34:58,034:INFO:Visual Rendered Successfully
2024-12-03 18:34:58,154:INFO:plot_model() successfully completed......................................
2024-12-03 18:35:52,660:INFO:Initializing evaluate_model()
2024-12-03 18:35:52,660:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-12-03 18:35:52,796:INFO:Initializing plot_model()
2024-12-03 18:35:52,796:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-12-03 18:35:52,796:INFO:Checking exceptions
2024-12-03 18:35:52,870:INFO:Preloading libraries
2024-12-03 18:35:52,886:INFO:Copying training dataset
2024-12-03 18:35:52,886:INFO:Plot type: pipeline
2024-12-03 18:35:53,169:INFO:Visual Rendered Successfully
2024-12-03 18:35:53,285:INFO:plot_model() successfully completed......................................
2024-12-03 18:36:08,438:INFO:Initializing plot_model()
2024-12-03 18:36:08,439:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), plot=error, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-12-03 18:36:08,439:INFO:Checking exceptions
2024-12-03 18:36:08,524:INFO:Preloading libraries
2024-12-03 18:36:08,533:INFO:Copying training dataset
2024-12-03 18:36:08,533:INFO:Plot type: error
2024-12-03 18:36:10,997:INFO:Fitting Model
2024-12-03 18:36:10,998:INFO:Scoring test/hold-out set
2024-12-03 18:36:12,167:INFO:Visual Rendered Successfully
2024-12-03 18:36:12,301:INFO:plot_model() successfully completed......................................
2024-12-03 18:36:28,386:INFO:Initializing plot_model()
2024-12-03 18:36:28,387:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), plot=parameter, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-12-03 18:36:28,387:INFO:Checking exceptions
2024-12-03 18:36:28,466:INFO:Preloading libraries
2024-12-03 18:36:28,466:INFO:Copying training dataset
2024-12-03 18:36:28,466:INFO:Plot type: parameter
2024-12-03 18:36:28,482:INFO:Visual Rendered Successfully
2024-12-03 18:36:28,614:INFO:plot_model() successfully completed......................................
2024-12-03 18:36:35,773:INFO:Initializing plot_model()
2024-12-03 18:36:35,773:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), plot=confusion_matrix, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-12-03 18:36:35,773:INFO:Checking exceptions
2024-12-03 18:36:35,849:INFO:Preloading libraries
2024-12-03 18:36:35,865:INFO:Copying training dataset
2024-12-03 18:36:35,865:INFO:Plot type: confusion_matrix
2024-12-03 18:36:38,336:INFO:Fitting Model
2024-12-03 18:36:38,337:INFO:Scoring test/hold-out set
2024-12-03 18:36:39,426:INFO:Visual Rendered Successfully
2024-12-03 18:36:39,536:INFO:plot_model() successfully completed......................................
2024-12-03 18:36:59,308:INFO:Initializing plot_model()
2024-12-03 18:36:59,309:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), plot=pr, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-12-03 18:36:59,311:INFO:Checking exceptions
2024-12-03 18:36:59,384:INFO:Preloading libraries
2024-12-03 18:36:59,398:INFO:Copying training dataset
2024-12-03 18:36:59,398:INFO:Plot type: pr
2024-12-03 18:37:01,721:INFO:Fitting Model
2024-12-03 18:37:01,721:INFO:Scoring test/hold-out set
2024-12-03 18:37:02,790:INFO:Visual Rendered Successfully
2024-12-03 18:37:02,918:INFO:plot_model() successfully completed......................................
2024-12-03 18:37:22,046:INFO:Initializing plot_model()
2024-12-03 18:37:22,046:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), plot=manifold, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-12-03 18:37:22,051:INFO:Checking exceptions
2024-12-03 18:37:22,133:INFO:Preloading libraries
2024-12-03 18:37:22,133:INFO:Copying training dataset
2024-12-03 18:37:22,133:INFO:Plot type: manifold
2024-12-03 18:37:24,485:INFO:Fitting & Transforming Model
2024-12-03 18:37:25,878:INFO:Visual Rendered Successfully
2024-12-03 18:37:25,987:INFO:plot_model() successfully completed......................................
2024-12-03 18:37:44,677:INFO:Initializing plot_model()
2024-12-03 18:37:44,677:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), plot=tree, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-12-03 18:37:44,678:INFO:Checking exceptions
2024-12-03 18:37:48,089:INFO:Initializing plot_model()
2024-12-03 18:37:48,089:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F0A19248D0>, estimator=XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...), plot=rfe, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2024-12-03 18:37:48,090:INFO:Checking exceptions
2024-12-03 18:37:48,166:INFO:Preloading libraries
2024-12-03 18:37:48,182:INFO:Copying training dataset
2024-12-03 18:37:48,182:INFO:Plot type: rfe
2024-12-03 18:37:50,769:INFO:Fitting Model
